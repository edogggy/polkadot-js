export default {
  chain: 'Polkadot Dev (v0.5.1)',
  genesisHash: '0x27b6d5e0f4fdce1c4d20b82406f193acacce0c19e0d2c0e7ca47725c2572a06a',
  ss58Format: 42,
  tokenDecimals: 15,
  tokenSymbol: 'DEV',
  metaCalls: ''
};
