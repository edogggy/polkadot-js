// Copyright 2019 @polkadot/extension-chains authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

// Generated via 'yarn run chain:info ws://127.0.0.1:9944'

export default {
  chain: 'Kusama CC3',
  genesisHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
  icon: 'polkadot',
  specVersion: 1020,
  ss58Format: 2,
  tokenDecimals: 12,
  tokenSymbol: 'KSM',
  types: {
    Keys: 'SessionKeys5'
  },
  metaCalls: ''
};// Generated via 'yarn run chain:info ws://127.0.0.1:9944'

export default {
  chain: 'Kusama CC3',
  genesisHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
  specVersion: 1020,
  ss58Format: 2,
  tokenDecimals: 12,
  tokenSymbol: 'KSM',
  metaCalls: ''
};
